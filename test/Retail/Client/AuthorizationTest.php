<?php


namespace DealPerch\Test\Retail\Client;


use DealPerch\Retail\Client\Configuration;
use DealPerch\Retail\Client\Retail;
use DealPerch\Retail\Client\DTO\SearchResponse;
use GuzzleHttp\Client;
use League\OAuth2\Client\Provider\GenericProvider;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use PHPUnit\Framework\TestCase;
use Ramsey\Uuid\Uuid;

class AuthorizationTest extends TestCase
{

    /**
     * @var Retail
     */
    private $APIClient;

    private $authProvider;

    private $SSOBaseURL;

    public function setUp()
    {
        $this->SSOBaseURL = 'http://sso.development.dealperch.com:19002/v1/';

        $this->authProvider = new GenericProvider([
            'clientId' => '374ddc0d-4e45-4517-8b6b-e82288508b4a',    // The client ID assigned to you by the provider
            'clientSecret' => '',   // The client password assigned to you by the provider
            'urlAuthorize' => $this->SSOBaseURL . 'auth',
            'urlAccessToken' => $this->SSOBaseURL . 'auth',
            'urlResourceOwnerDetails' => $this->SSOBaseURL . 'identity',
        ]);


    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        if (file_exists(__DIR__ . '/../../credentials.cache')) {
            unlink(__DIR__ . '/../../credentials.cache');
        }

    }


    public function testAuthenticateWithPasswordGrant()
    {
        $configuration = new Configuration(__DIR__ . '/../../credentials.cache',
            'http://retail-api.development.dealperch.com:19005/v1/', $this->SSOBaseURL, 'password',
            'test@dealperch.com', 'testing');
        $HTTPClient = new Client();

        $logger = new Logger('RetailTest');
        try {
            $logger->pushHandler(new StreamHandler(__DIR__ . '/../../retail.log', Logger::DEBUG));
        } catch (\Exception $e) {
            // do nothing
        }


        $this->APIClient = new Retail($this->authProvider, $HTTPClient, $logger, $configuration);

        $this->assertInstanceOf(Retail::class, $this->APIClient);

        $authToken = $this->APIClient->getAuthorizationHeaderValue();
        $this->assertInternalType('string', $authToken);
        var_dump($authToken);


    }

    public function testAuthenticatedWithTrustedGrant()
    {

        $authProvider = new GenericProvider([
            'clientId' => 'com.dealperch.wishlist',
            // The client ID assigned to you by the provider
            'clientSecret' => '1d6425349254e4e7d63e6805c5335d7ce5431d51e6e6a6135d6be50938e292dd',
            // The client password assigned to you by the provider
            'urlAuthorize' => $this->SSOBaseURL . 'auth',
            'urlAccessToken' => $this->SSOBaseURL . 'auth',
            'urlResourceOwnerDetails' => $this->SSOBaseURL . 'identity',
        ]);


        $configuration = new Configuration(__DIR__ . '/../../credentials.cache',
            'http://retail-api.development.dealperch.com:19005/v1/', $this->SSOBaseURL, 'trusted',
            null, null);

        $HTTPClient = new Client();

        $logger = new Logger('RetailTest');
        try {
            $logger->pushHandler(new StreamHandler(__DIR__ . '/../../retail.log', Logger::DEBUG));
        } catch (\Exception $e) {
            // do nothing
        }
        $this->APIClient = new Retail($authProvider, $HTTPClient, $logger, $configuration);
        $this->APIClient->updateUserIdToImpersonate(Uuid::fromString('2ab02a08-00f7-43a7-b4ec-14ddbadbc128'));
        //$this->APIClient->updateUserIdToImpersonate(Uuid::uuid4());

        $this->assertInstanceOf(Retail::class, $this->APIClient);

        $authToken = $this->APIClient->getAuthorizationHeaderValue();
        $this->assertInternalType('string', $authToken);


    }

    public function testAuthenticateWithClientCredentialsGrant()
    {

        $configuration = new Configuration(__DIR__ . '/../../credentials.cache',
            'http://retail-api.development.dealperch.com:19005/v1/', $this->SSOBaseURL, 'client_credentials',
            'test@dealperch.com', 'testing');
        $HTTPClient = new Client();


        $logger = new Logger('RetailTest');
        try {
            $logger->pushHandler(new StreamHandler(__DIR__ . '/../../retail.log', Logger::DEBUG));
        } catch (\Exception $e) {
            // do nothing
        }
        $this->APIClient = new Retail($this->authProvider, $HTTPClient, $logger, $configuration);

        $this->assertInstanceOf(Retail::class, $this->APIClient);

        $authToken = $this->APIClient->getAuthorizationHeaderValue();
        $this->assertInternalType('string', $authToken);

        var_dump($authToken);

    }
}